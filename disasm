#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;

# CSCVon8 disassembler, (C) 2019 Warren Toomey, GPL3

my %Inst;
my @ROM;

open( my $IN, "<", "opcodes" ) || die("Cannot read opcodes: $!\n");
while (<$IN>) {
  chomp;
  my ($opcode, $oplen, $name)= split( m{\s+}, $_);
  $Inst{$opcode}= [ $name, $oplen ];
}
close($IN);

open($IN, "<", "instr.rom") || die("Cannot read instr.rom: $!\n");
while (<$IN>) {
  chomp; push(@ROM, split(m{\s+}, $_));
}
close($IN);

#print(Dumper(\%Inst));
#print(Dumper(\@ROM));

my $i=0;
while ($i < 0x7FFF) {
  printf("%04x: ", $i);
  my $inst= $ROM[$i];
  die("Unknown instruction $inst\n") if (!defined($Inst{$inst}));
  my ($name, $len)= @{ $Inst{$inst} };
  print("$name\t");
  printf("\$%02s", $ROM[$i+1]) if ($len==2);
  printf("\$%02s%02s", $ROM[$i+1], $ROM[$i+2]) if ($len==3);
  printf("\$%02s%02s \$%02s%02s \$%02s%02s",
	$ROM[$i+1], $ROM[$i+2], $ROM[$i+3], $ROM[$i+4], $ROM[$i+5], $ROM[$i+6])
		if ($len==7);
  print("\n");
  $i += $len;
}
exit(0);

